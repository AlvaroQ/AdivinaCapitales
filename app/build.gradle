apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'// Added Firebase Crashlytics plugin.

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        applicationId names.applicationId
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code
        versionName versions.name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        config {
            keyAlias ADIVINACAPITAL_RELEASE_KEY_ALIAS
            keyPassword ADIVINACAPITAL_RELEASE_KEY_PASSWORD
            storeFile file(ADIVINACAPITAL_RELEASE_STORE_FILE)
            storePassword ADIVINACAPITAL_RELEASE_STORE_PASSWORD
        }
    }
    buildTypes {
        debug {
            jniDebuggable true
            testCoverageEnabled true
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.config
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }

            resValue 'string', 'BANNER_GAME', getAdmobBannerTestId()
            resValue 'string', 'BANNER_RANKING', getAdmobBannerTestId()
            resValue 'string', 'BANNER_INFO', getAdmobBannerTestId()
            resValue 'string', 'BONIFICADO_GAME', getAdmobBonificadoTestId()
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.config
            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }

            resValue 'string', 'BANNER_GAME', getAdmobBannerGameId()
            resValue 'string', 'BANNER_RANKING', getAdmobBannerRankingId()
            resValue 'string', 'BANNER_INFO', getAdmobBannerInfoId()
            resValue 'string', 'BONIFICADO_GAME', getAdmobBonificadoGameId()
        }
        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/ASL2.0'
            exclude("META-INF/*.kotlin_module")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation project(":data")
    implementation project(":domain")
    implementation project(":usecases")

    implementation androidLibs.values()
    implementation androidKtxLibs.values()
    implementation kotlinLibs.values()
    implementation libs.values()
    implementation androidKaptLibs.values()
    implementation 'com.google.android.play:integrity:1.0.1'
    implementation 'com.google.android.gms:play-services-auth:20.2.0'

// https://mvnrepository.com/artifact/org.bitbucket.b_c/jose4j
    implementation group: 'org.bitbucket.b_c', name: 'jose4j', version: '0.7.12'

    testImplementation testLibs.values()
    testImplementation androidxTestLibs.values()
    androidTestImplementation androidTestLibs.values()

}

// KEYS ADMOB TEST
def getAdmobBannerTestId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_banner_test_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobBonificadoTestId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_bonificado_test_id' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}

// KEYS ADMOB PRODUCTION
def getAdmobBannerGameId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_banner_game' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobBannerRankingId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_banner_ranking' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobBannerInfoId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_banner_ranking' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}
def getAdmobBonificadoGameId() {
    try {
        def stringsFile = file("./src/main/res/values/secrets.xml")
        return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'admob_bonificado_game' }.text()
    } catch(e) {
        println(e)
        return ""
    }
}